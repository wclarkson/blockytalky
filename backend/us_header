#!/usr/bin/env python

import time
import math
import thread
import logging
import socket
import pika
import atexit
import copy
import os
import nickOSC
import random
from blockytalky_id import *
from message import *
import urllib2

logger = logging.getLogger(__name__)
os.nice(-2)

def handle_logging(logger):
    # Set the logging level.
    handler = logging.handlers.RotatingFileHandler(filename='/home/pi/blockytalky/logs/user_script.log',
                                                   maxBytes=8192, backupCount=3)
    globalHandler = logging.handlers.RotatingFileHandler(filename='/home/pi/blockytalky/logs/master.log',
                                                         maxBytes=16384, backupCount=3)
    formatter = logging.Formatter(fmt='%(asctime)s - %(levelname)s: %(message)s',
                                  datefmt='%H:%M:%S %d/%m')
    handler.setFormatter(formatter)
    globalHandler.setFormatter(formatter)
    globalHandler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.addHandler(globalHandler)
    logger.setLevel(logging.INFO)
        

class UserScript(object):
    RUN_INTERVAL = 0.04 # how often to do the contents of "run_continuously"

    def __init__(self):
        logger.info('Initializing user script object')
       
        self.hostname = BlockyTalkyID()
        self.robot = Message.initStatus()
        self.last_robot = Message.initStatus()
        
        self.sensorStatus= Message.createSensorStatus()
        logger.debug(self.sensorStatus.values())

        self.in_channel = None
        self.hwcmd_channel = None
        self.msgout_channel = None

        parameters = pika.ConnectionParameters()
        self.connection = pika.BlockingConnection(parameters)
        
        self.setup_hwcmd_channel()
        self.setup_in_channel()      
        self.setup_msgout_channel()
        
        self.initialized = False
        
        # initializes the list of callback functions for when you receive a 
        # sensor message
        self.callbacks = []
        self.init_callbacks()
        self.whiles = []
        self.init_whiles()
        self.msg_functions = []
        self.init_msgs()

    def handshake(self):
        toSend = Message(self.hostname, None, "handshake", None)
        toSend = Message.encode(toSend)
        self.hwcmd_channel.basic_publish(exchange="HwCmd",
                                         routing_key="", body=toSend)

    def start(self):
        try:
            self.in_channel.start_consuming()
        except pika.exceptions.ConnectionClosed:
            logger.info("user script pika restarting...")
            parameters = pika.ConnectionParameters()
            self.connection = pika.BlockingConnection(parameters)
            self.setup_hwcmd_channel()
            self.setup_in_channel()      
            self.setup_msgout_channel()
            self.start()
       

     
    def schedule_run_continuously(self):
        self.connection.add_timeout(self.__class__.RUN_INTERVAL, self.run_cont_and_reschedule)   

    def run_cont_and_reschedule(self):
        self.run_continuously()
        self.schedule_run_continuously()


    def setup_hwcmd_channel(self):  
        self.hwcmd_channel = self.connection.channel()
        logger.info("Creating sensors exchange...")
        self.hwcmd_channel.exchange_declare(exchange='HwCmd', type='fanout')

    def setup_msgout_channel(self):
        self.msgout_channel = self.connection.channel()
        self.msgout_channel.exchange_declare(exchange='msgout', type='fanout')

    def setup_in_channel(self):
        self.in_channel = self.connection.channel()
        # why is the exchange declare logs?
        self.in_channel.exchange_declare(exchange='logs', type='fanout')
        result = self.in_channel.queue_declare(exclusive=True)
        queue_name = result.method.queue
        self.in_channel.queue_bind(exchange='sensors', queue=queue_name)
        self.in_channel.queue_bind(exchange='msgin', queue=queue_name)
        logger.info("Declaring HwVal callback...")
        self.in_channel.basic_consume(self.handle_in_delivery, queue=queue_name, no_ack=True)
    
  
    def handle_in_delivery(self, ch, method, properties, body):
        #print "user script received message on " + method.exchange 
        if method.exchange == "msgin":
            decoded = Message.decode(body)
            msg = decoded.getContent()
            self.handle_msgin_delivery(msg)
        elif method.exchange == "sensors":
            self.handle_hwval_delivery(body)
        else:
            print body

    def handle_hwval_delivery(self, body):
        message = Message.decode(body)
        hwDict = message.getContent()
        logger.debug('Updating the robot status: %s' % str(hwDict))
        
        # update value changes
        for key, valueList in hwDict.iteritems():
            for index, value in enumerate(valueList):
                if value is not None:
                    self.robot[key][index] = value
                    
        # there is unread data on all ports
        for sensor in self.sensorStatus:
            self.sensorStatus[sensor] = True

        if self.initialized == False:
            self.initialized = True
            self.run_on_start()
            self.schedule_run_continuously()
    
        else:
            for callback in self.callbacks:
                callback()
                
            self.last_robot = copy.deepcopy(self.robot)
    
    def handle_msgin_delivery(self, msg):
        print "user script received remote message: " + msg
        for m in self.msg_functions:
            m(msg)

    #this will be overwritten by user code if they use those blocks
    def run_on_start(self):
        pass
 
    def run_continuously(self):
        for f in self.whiles:
            f()

 
