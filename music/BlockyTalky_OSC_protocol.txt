BlockyTalky OSC Protocol
========================

I. Preface
	The music blocks in BlockyTalky function by constructing OSC messages with different target addresses and message contents. These messages are received by maestro.ck, a ChucK module, which then performs computations based on those messages according to this protocol and sends more messages to be received by a sound-driving module, mastersound.pd. This document describes first the protocol used between BlockyTalky and maestro.ck (from BlockyTalky to ChucK), followed by the protocol used between maestro.ck and mastersound.pd (from ChucK to PureData).
	
II. Messaging Protocol between BlockyTalky and the ChucK Maestro
	A. Playing Notes
		/lpc/maestro/voice/play if*8*16 i(voice) i(should_loop) f(beat_align_fraction)
			This command replaces the specified voice with the new voice data and plays it, or attempts to overlay the new voice data on top of the old, and continues playing.
			Message containing 128 notes, where each note is identified by an integer (i) and a float (f). Such a construct is considered a "phrase," and will be henceforth named thusly in this document. A phrase may contain empty notes; such notes take no time to play and produce no sound, and can be specified with a pitch of -1 and a duration of 0.
			This message also contains a float specifying a "beat alignment fraction" and an int (1-8) specifying the voice to be used to play the notes in the phrase. 0 can be passed as the beat alignment fraction, in which case no beat alignment will occur and the phase will play without any delay.
			
		/lpc/maestro/voice/stop i(voice) f(beat_align_fraction)
			Stops playing the specified voice.
			As before, this command allows for beat alignment; pass 0 to ignore alignment and stop immediately.
			
		/lpc/maestro/drums/play i*7*32 i(should_loop) f(beat_align_fraction)
			Replaces the drumline with the new drumline data and plays it, or attempts to overlay the new drumline on top of the old and continues playing it. See voiceX/play for more information on other arguments.
			
		/lpc/maestro/drums/stop f(beat_align_fraction)
			Stops playing the drumline.
			As before, this command allows for beat alignment; pass 0 to ignore alignment and stop immediately.
	
	B. Controlling Sound
		/lpc/maestro/tempo f(bpm)
			The real number argument specifies the user's desired song tempo in beats per minute.
			
		/lpc/maestro/voice/volume i(voice) i(value) f(beat_align_fraction)
			Sets the volume of the specified voice.
			
		/lpc/maestro/voice/instrument i(voice) i(value)
			Sets the instrument to use for the specified voice.
			
		/lpc/maestro/drums/volume i(value)*7
			Sets the volume of the drums, individually (there are 7 different drum sounds).
			
		/lpc/maestro/voice/bandpassfilter i(voice) i(value) f(beat_align_fraction)
			Sets the bandpassfilter property of the specified voice.

III. Messaging Protocol between the ChucK Maestro and PD Sound Driver
	A. Playing Notes
		// TODO: write this section
			
	B. Controlling Sound
		// TODO: write this section
	